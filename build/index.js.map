{
  "version": 3,
  "file": "index.js",
  "sourceRoot": "../src/",
  "sources": [
    "index.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "module = null\r\ntry\r\n  module = angular.module 'ndx'\r\ncatch e\r\n  module =angular.module 'ndx', []\r\nmodule.provider 'Server', ->\r\n  config =\r\n    sharedAll: true\r\n  $get: ($http, $q, $rootElement, $window, LocalSettings, Auth, ndxdb, socket, rest) ->\r\n    autoId = LocalSettings.getGlobal('endpoints')?.autoId or '_id'\r\n    offline = LocalSettings.getGlobal('offline')\r\n    endpoints = null\r\n    original =\r\n      $post: $http.post\r\n      $get: $http.get\r\n      $put: $http.put\r\n      $delete: $http.delete\r\n    makeRegex = (str) ->\r\n      params = []\r\n      regex = new RegExp '^' + str.replace(/(:[^\\/]+)/gi, (all, param) ->\r\n        params.push param.replace(':', '')\r\n        '([^\\/]*)'\r\n      ) + '$'\r\n      return\r\n        regex: regex\r\n        params: params\r\n        fns: []\r\n    isOnline = ->\r\n      not offline\r\n    Req = (method, uri, config, params, endpoint, restrict) ->\r\n      uri: uri\r\n      method: method\r\n      endpoint: endpoint\r\n      body: config or {}\r\n      params: params\r\n      restrict: restrict\r\n    Res = (method, uri, config, defer) ->\r\n      status = 200\r\n      method: method\r\n      data: config\r\n      status: (_status) ->\r\n        status = _status\r\n        @\r\n      end: (str) ->\r\n        defer.resolve\r\n          status: status\r\n          data: str\r\n      json: (data) ->\r\n        defer.resolve\r\n          status: status\r\n          data: data\r\n      reject: (data) ->\r\n        defer.reject data\r\n    Ndx = ->\r\n      routes =\r\n        get: []\r\n        post: []\r\n        put: []\r\n        delete: []\r\n      makeRoute = (method, route, args) ->\r\n        myroute = makeRegex route\r\n        i = 1\r\n        while i++ < args.length - 1\r\n          myroute.fns.push args[i]\r\n        myroute.endpoint = args[0]\r\n        routes[method].push myroute\r\n      routeRequest = (method, uri, config) ->\r\n        route = null\r\n        for testroute in routes[method]\r\n          if testroute.regex.test(uri)\r\n            route = testroute\r\n            break\r\n        if route\r\n          restrict = getRestrict route.endpoint\r\n          if restrict.local\r\n            return original['$' + method] uri, config\r\n          defer = $q.defer()\r\n          callFn = (index, req, res) ->\r\n            if route.fns[index]\r\n              route.fns[index] req, res, ->\r\n                index++\r\n                callFn index, req, res\r\n          ex = route.regex.exec uri\r\n          params = {}\r\n          for param, i in route.params\r\n            console.log decodeURIComponent(ex[i+1])\r\n            params[param] = decodeURIComponent(ex[i+1])\r\n          req = Req method, uri, config, params, route.endpoint, restrict\r\n          res = Res method, uri, config, defer\r\n          callFn 0, req, res\r\n          return defer.promise\r\n        else\r\n          return original['$' + method] uri, config  \r\n      app:\r\n        routeRequest: routeRequest\r\n        get: (endpoint, route) ->\r\n          if Object.prototype.toString.call(route) is '[object Array]'\r\n            for r in route\r\n              makeRoute 'get', r, arguments\r\n          else\r\n            makeRoute 'get', route, arguments\r\n        post: (endpoint, route) ->\r\n          if Object.prototype.toString.call(route) is '[object Array]'\r\n            for r in route\r\n              makeRoute 'post', r, arguments\r\n          else\r\n            makeRoute 'post', route, arguments\r\n        put: (endpoint, route) ->\r\n          if Object.prototype.toString.call(route) is '[object Array]'\r\n            for r in route\r\n              makeRoute 'put', r, arguments\r\n          else\r\n            makeRoute 'put', route, arguments\r\n        delete: (endpoint, route) ->\r\n          if Object.prototype.toString.call(route) is '[object Array]'\r\n            for r in route\r\n              makeRoute 'delete', r, arguments\r\n          else\r\n            makeRoute 'delete', route, arguments\r\n      database: ndxdb\r\n      settings:\r\n        AUTO_ID: autoId\r\n        SOFT_DELETE: true\r\n    ndx = Ndx()\r\n    ## REST FUNCTIONS\r\n    hasDeleted = (obj) ->\r\n      truth = false\r\n      if typeof(obj) is 'object'\r\n        for key of obj\r\n          if key is 'deleted'\r\n            return true\r\n          else\r\n            if truth = hasDeleted obj[key]\r\n              return true\r\n      truth\r\n    getRestrict = (tableName) ->\r\n      if endpoints\r\n        if endpoints.restrict\r\n          role = null\r\n          restrict = null\r\n          if user = Auth.getUser()\r\n            if user.roles\r\n              for key of user.roles\r\n                if user.roles[key]\r\n                  role = key\r\n                  break\r\n          tableRestrict = endpoints.restrict[tableName] or endpoints.restrict.default\r\n          if tableRestrict\r\n            return tableRestrict[role] or tableRestrict.default or {}\r\n      return {}\r\n    selectFn = (tableName, all) ->\r\n      (req, res, next) ->\r\n        myTableName = tableName\r\n        restrict = req.restrict\r\n        if all and restrict.all\r\n          return res.json\r\n            total: 0\r\n            page: 1\r\n            pageSize: 0\r\n            items: []\r\n        if not all or not restrict.sharedAll\r\n          myTableName += \"_#{Auth.getUser()._id}\"\r\n        if all\r\n          myTableName += \"_all\"\r\n        if req.params and req.params.id\r\n          where = {}\r\n          if req.params.id.indexOf('{') is 0\r\n            where = JSON.parse req.params.id\r\n          else\r\n            where[ndx.settings.AUTO_ID] = req.params.id\r\n          if ndx.settings.SOFT_DELETE and not req.body.showDeleted and not hasDeleted(where)\r\n            where.deleted = null\r\n          if all\r\n            elevateUser ndx.user\r\n          ndx.database.select myTableName, \r\n            where: where\r\n          , (items) ->\r\n            if items and items.length\r\n              res.json items[0]\r\n            else\r\n              res.json {}\r\n        else\r\n          req.body.where = req.body.where or {}\r\n          if ndx.settings.SOFT_DELETE and not req.body.showDeleted and not hasDeleted(req.body.where)\r\n            req.body.where.deleted = null\r\n          if req.body.all or all\r\n            elevateUser ndx.user\r\n          ndx.database.select myTableName, req.body, (items, total) ->\r\n            res.json\r\n              total: total\r\n              page: req.body.page or 1\r\n              pageSize: req.body.pageSize or 0\r\n              items: items\r\n    upsertFn = (tableName) ->\r\n      (req, res, next) ->\r\n        myTableName = \"#{tableName}_#{Auth.getUser()._id}\"\r\n        op = if req.params.id then 'update' else 'insert'\r\n        where = {}\r\n        if req.params.id\r\n          where[ndx.settings.AUTO_ID] = req.params.id\r\n        req.body.modifiedAt = 0\r\n        req.body.insertedAt = req.body.insertedAt or new Date().valueOf()\r\n        ndx.database.upsert myTableName, req.body, where, (err, r) ->\r\n          res.json(err or r)\r\n        if isOnline()\r\n          original.$post req.uri, req.body\r\n          .then ->\r\n            true\r\n          , ->\r\n            false\r\n    deleteFn = (tableName) ->\r\n      (req, res, next) ->\r\n        myTableName = \"#{tableName}_#{Auth.getUser()._id}\"\r\n        if req.params.id\r\n          where = {}\r\n          where[ndx.settings.AUTO_ID] = req.params.id\r\n          if ndx.settings.SOFT_DELETE\r\n            ndx.database.update tableName, \r\n              deleted:\r\n                by:ndx.user[ndx.settings.AUTO_ID]\r\n                at:new Date().valueOf()\r\n              modifiedAt: 0\r\n            , where\r\n          else\r\n            ndx.database.delete myTableName, where\r\n        if isOnline()\r\n          original.$delete req.uri\r\n        res.end 'OK'\r\n    makeEndpointRoutes = ->\r\n      for endpoint in endpoints.endpoints\r\n        ndx.app.get endpoint, [\"/api/#{endpoint}\", \"/api/#{endpoint}/:id\"], selectFn(endpoint)\r\n        ndx.app.post endpoint, \"/api/#{endpoint}/search\", selectFn(endpoint)\r\n        ndx.app.get endpoint, \"/api/#{endpoint}/:id/all\", selectFn(endpoint, true)\r\n        ndx.app.post endpoint, \"/api/#{endpoint}/search/all\", selectFn(endpoint, true)\r\n        #ndx.app.post endpoint, \"/api/#{endpoint}/modified\", modifiedFn(endpoint)\r\n        ndx.app.post endpoint, [\"/api/#{endpoint}\", \"/api/#{endpoint}/:id\"], upsertFn(endpoint)\r\n        ndx.app.put endpoint, [\"/api/#{endpoint}\", \"/api/#{endpoint}/:id\"], upsertFn(endpoint)\r\n        ndx.app.delete endpoint, \"/api/#{endpoint}/:id\", deleteFn(endpoint)\r\n    makeTables = ->\r\n      if endpoints and endpoints.endpoints\r\n        for endpoint in endpoints.endpoints\r\n          myTableName = endpoint\r\n          restrict = getRestrict myTableName\r\n          if restrict.all or restrict.localAll\r\n            continue\r\n          if not restrict.sharedAll\r\n            myTableName += \"_#{Auth.getUser()._id}\"\r\n          myTableName += \"_all\"\r\n          ndx.database.makeTable myTableName\r\n      if endpoints and endpoints.endpoints and Auth.getUser()\r\n        for endpoint in endpoints.endpoints\r\n          restrict = getRestrict endpoint\r\n          if restrict.local\r\n            continue\r\n          ndx.database.makeTable \"#{endpoint}_#{Auth.getUser()._id}\"\r\n    uploadEndpoints = (cb) ->\r\n      if endpoints and endpoints.endpoints and Auth.getUser()\r\n        async.each endpoints.endpoints, (endpoint, endpointCb) ->\r\n          restrict = getRestrict endpoint\r\n          if restrict.local\r\n            return endpointCb()\r\n          myTableName = \"#{endpoint}_#{Auth.getUser()._id}\"\r\n          ndx.database.getDocsToUpload myTableName, (docs) ->\r\n            if docs\r\n              async.each docs, (doc, docCb) ->\r\n                original.$post \"/api/#{endpoint}\", doc\r\n              , ->\r\n                endpointCb()\r\n            else\r\n              endpointCb()\r\n        , ->\r\n          cb?()\r\n    totalFetched = 0\r\n    fetchNewForEndpoint = (endpoint, all, endpointCb) ->\r\n      if not Auth.getUser()\r\n        return endpointCb?()\r\n      localEndpoint = endpoint\r\n      restrict = getRestrict localEndpoint\r\n      if restrict.local\r\n        return endpointCb?()\r\n      if all and (restrict.all or restrict.localAll)\r\n        return endpointCb?()\r\n      if not all or not config.sharedAll\r\n        localEndpoint += \"_#{Auth.getUser()._id}\"\r\n      if all\r\n        localEndpoint += \"_all\"\r\n      PAGE_SIZE = 10\r\n      fetchPage = (firstPage) ->\r\n        ndx.database.maxModified localEndpoint, (localMaxModified) ->\r\n          where =\r\n            modifiedAt: {}\r\n          if firstPage\r\n            where.modifiedAt.$gt = localMaxModified\r\n          else\r\n            where.modifiedAt.$gte = localMaxModified\r\n          original.$post \"/api/#{endpoint}/search#{if all then '/all' else ''}\",\r\n            where: where\r\n            sort: 'modifiedAt'\r\n            sortDir: 'ASC'\r\n            page: 1\r\n            pageSize: PAGE_SIZE\r\n          .then (modifiedDocs) ->\r\n            console.log modifiedDocs.data.total, 'total'\r\n            if modifiedDocs.data and modifiedDocs.data.total\r\n              async.each modifiedDocs.data.items, (modifiedDoc, upsertCb) ->\r\n                ndx.database.upsert localEndpoint, modifiedDoc\r\n                upsertCb()\r\n              , ->\r\n                totalFetched += modifiedDocs.data?.total or 0\r\n                if modifiedDocs.data.total > PAGE_SIZE\r\n                  fetchPage()\r\n                else\r\n                  endpointCb?()\r\n            else\r\n              endpointCb?()\r\n          , ->\r\n            endpointCb?()\r\n      fetchPage true\r\n    fetchNewData = (cb) ->\r\n      if endpoints and endpoints.endpoints\r\n        async.each endpoints.endpoints, (endpoint, endpointCb) ->\r\n          fetchNewForEndpoint endpoint, true, ->\r\n            fetchNewForEndpoint endpoint, false, ->\r\n              uploadEndpoints endpointCb\r\n        , ->\r\n          cb?()\r\n    fetchCount = 0\r\n    fetchAndUpload = (data) ->\r\n      totalFetched = 0\r\n      if data\r\n        fetchNewForEndpoint data.table, true, ->\r\n          fetchNewForEndpoint data.table, false, ->\r\n            uploadEndpoints ->\r\n              if totalFetched > 0\r\n                rest.socketRefresh data\r\n      else\r\n        if fetchCount++ > 0\r\n          fetchNewData ->\r\n            if totalFetched > 0\r\n              rest.socketRefresh data\r\n    deleteEndpoint = (endpoint, all) ->\r\n      localEndpoint = endpoint\r\n      if not all or not config.sharedAll\r\n        localEndpoint += \"_#{Auth.getUser()._id}\"\r\n      if all\r\n        localEndpoint += \"_all\"\r\n      ndx.database.delete localEndpoint\r\n    checkRefresh = ->\r\n      if endpoints and endpoints.endpoints and user = Auth.getUser()\r\n        lastRefresh = LocalSettings.getGlobal('lastRefresh') or 0\r\n        if user.ndxRefresh\r\n          for endpoint of user.ndxRefresh\r\n            refreshed = false\r\n            if lastRefresh < user.ndxRefresh[endpoint] < new Date().valueOf()\r\n              deleteEndpoint endpoint, true\r\n              deleteEndpoint endpoint, false\r\n            if refreshed\r\n              LocalSettings.setGlobal 'lastRefresh', new Date().valueOf()\r\n    $http.post = (uri, config) ->\r\n      ndx.app.routeRequest 'post', uri, config\r\n    $http.get = (uri, config) ->\r\n      ndx.app.routeRequest 'get', uri, config\r\n    $http.put = (uri, config) ->\r\n      ndx.app.routeRequest 'put', uri, config\r\n    $http.delete = (uri, config) ->\r\n      ndx.app.routeRequest 'delete', uri, config\r\n    socket.on 'connect', fetchAndUpload\r\n    socket.on 'update', fetchAndUpload\r\n    socket.on 'insert', fetchAndUpload\r\n    socket.on 'delete', fetchAndUpload\r\n    Auth.onUser ->\r\n      makeTables()\r\n      #check for refresh\r\n      checkRefresh()\r\n      fetchNewData()\r\n    ndx.app.get null, '/rest/endpoints', (req, res, next) ->\r\n      if isOnline()\r\n        original.$get '/rest/endpoints', req.data\r\n        .then (response) ->\r\n          LocalSettings.setGlobal 'endpoints', response.data\r\n          endpoints = response.data\r\n          console.log 'endpoints', endpoints\r\n          makeEndpointRoutes()\r\n          makeTables()\r\n          checkRefresh()\r\n          fetchAndUpload()\r\n          res.json response.data\r\n        , ->\r\n          endpoints = LocalSettings.getGlobal 'endpoints'\r\n          if endpoints\r\n            makeEndpointRoutes()\r\n            makeTables()\r\n            res.json endpoints\r\n          else\r\n            res.json {}\r\n      else\r\n        endpoints = LocalSettings.getGlobal 'endpoints'\r\n        makeEndpointRoutes()\r\n        makeTables()\r\n        res.json endpoints\r\n    ndx.app.post null, '/api/refresh-login', (req, res, next) ->\r\n      if isOnline()\r\n        original.$post '/api/refresh-login', req.data\r\n        .then (response) ->\r\n          if response.status is 200\r\n            globalUsers = LocalSettings.getGlobal('users') or {}\r\n            globalUsers[response.data[autoId]] = response.data\r\n            LocalSettings.setGlobal 'users', globalUsers\r\n            LocalSettings.setGlobal 'loggedInUser',\r\n              user: response.data\r\n              until: new Date().valueOf() + (5 * 60 * 60 * 1000)\r\n            res.json response.data\r\n          else\r\n            res.status(response.status).json response.data\r\n        , ->\r\n          loggedInUser = LocalSettings.getGlobal 'loggedInUser'\r\n          if loggedInUser and loggedInUser.until and loggedInUser.until > new Date().valueOf()\r\n            loggedInUser.until = new Date().valueOf() + (5 * 60 * 60 * 1000)\r\n            LocalSettings.setGlobal 'loggedInUser', loggedInUser\r\n            res.json loggedInUser.user\r\n          else\r\n            res.status(401).json {}\r\n      else\r\n        loggedInUser = LocalSettings.getGlobal 'loggedInUser'\r\n        if loggedInUser and loggedInUser.until and loggedInUser.until > new Date().valueOf()\r\n          loggedInUser.until = new Date().valueOf() + (5 * 60 * 60 * 1000)\r\n          LocalSettings.setGlobal 'loggedInUser', loggedInUser\r\n          res.json loggedInUser.user\r\n        else\r\n          res.status(401).json {}\r\n    ndx.app.get null, '/api/logout', (req, res, next) ->\r\n      LocalSettings.setGlobal 'loggedInUser', null\r\n      original.$get req.uri, req.data\r\n      .then ->\r\n        true\r\n      , ->\r\n        false\r\n      res.end 'OK'\r\n    ndx.app.post null, '/api/login', (req, res, next) ->\r\n      original.$post req.uri, req.body\r\n      .then (response) ->\r\n        res.json response.data\r\n      , (err) ->\r\n        if err.status is 401\r\n          res.reject err\r\n        else\r\n          users = LocalSettings.getGlobal 'users'\r\n          user = null\r\n          for key of users\r\n            user = users[key]\r\n            if user.local?.email?.toLowerCase() is req.body.email?.toLowerCase()\r\n              break\r\n          if user\r\n            if dcodeIO.bcrypt.compareSync req.body.password, user.local.password\r\n              LocalSettings.setGlobal 'loggedInUser', \r\n                user: user\r\n                until: new Date().valueOf() + (5 * 60 * 60 * 1000)\r\n              res.json user\r\n            else\r\n              res.reject err\r\n          else\r\n            res.reject err\r\n    setOffline: (val) ->\r\n      offline = val\r\n      LocalSettings.setGlobal 'offline', offline\r\n    isOnline: isOnline\r\n    original: original\r\n    config: (_config) ->\r\n      config = _config\r\n.run (Server) ->\r\n  Server.setOffline false\r\n"
  ]
}